print(" 192311264 - MADHAVA ")

# Taking number of queens as input from user
def is_safe(board, row, col, n):
    # Check vertical (column)
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper left diagonal
    i, j = row - 1, col - 1
    while i >= 0 and j >= 0:
        if board[i][j] == 1:
            return False
        i -= 1
        j -= 1

    # Check upper right diagonal
    i, j = row - 1, col + 1
    while i >= 0 and j < n:
        if board[i][j] == 1:
            return False
        i -= 1
        j += 1

    return True

def solve(board, row, n):
    if row == n:
        return True  # All queens are placed

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1  # Place queen
            if solve(board, row + 1, n):
                return True
            board[row][col] = 0  # Backtrack if placing didn't work
    return False

def print_board(board, n):
    print("\nFinal Board (Q = Queen):")
    for i in range(n):
        for j in range(n):
            print(" Q " if board[i][j] else " . ", end="")
        print()

def n_queens():
    print("=== N Queens Problem ===")
    n = int(input("Enter board size (e.g. 8 for 8x8 board): "))

    board = [[0] * n for _ in range(n)]

    if solve(board, 0, n):
        print_board(board, n)
    else:
        print("No solution exists for this board size.")

# ---- MAIN FUNCTION CALL ----
n_queens()
