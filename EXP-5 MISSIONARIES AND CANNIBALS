print(" 192311264 ")
def is_valid(state):
    m1, c1, boat, m2, c2 = state
    if m1 < 0 or c1 < 0 or m2 < 0 or c2 < 0:
        return False
    if (m1 > 0 and m1 < c1) or (m2 > 0 and m2 < c2):
        return False
    return True

def successors(state):
    m1, c1, boat, m2, c2 = state
    moves = [(1,0), (2,0), (0,1), (0,2), (1,1)]
    next_states = []
    for m, c in moves:
        if boat == 1:
            new_state = (m1 - m, c1 - c, 0, m2 + m, c2 + c)
        else:
            new_state = (m1 + m, c1 + c, 1, m2 - m, c2 - c)
        if is_valid(new_state):
            next_states.append(new_state)
    return next_states

def bfs(start, goal):
    queue = [(start, [start])]
    visited = set()
    while queue:
        state, path = queue.pop(0)
        if state == goal:
            return path
        for next_state in successors(state):
            if next_state not in visited:
                visited.add(next_state)
                queue.append((next_state, path + [next_state]))

start = (3,3,1,0,0)
goal = (0,0,0,3,3)
solution = bfs(start, goal)
for step in solution:
    print(step)
