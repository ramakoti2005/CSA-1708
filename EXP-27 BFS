% Facts: Define the graph (adjacent nodes)
edge(a, b, 1).
edge(b, c, 1).
edge(a, d, 2).
edge(d, e, 1).
edge(e, f, 1).
edge(c, f, 2).

% Heuristic: The heuristic value for each node (this is what the algorithm uses to decide which node to expand)
heuristic(a, 6).
heuristic(b, 5).
heuristic(c, 4).
heuristic(d, 3).
heuristic(e, 2).
heuristic(f, 0).

% Best First Search Algorithm
best_first_search(Start, Goal, Path) :-
    best_first_search_helper([Start], Goal, Path).

% Helper predicate for best first search
best_first_search_helper([Goal | Path], Goal, [Goal | Path]) :- 
    !.  % When the goal is reached, stop recursion

best_first_search_helper([Current | Rest], Goal, Path) :-
    findall(Next, (edge(Current, Next, _), \+ member(Next, [Current | Rest])), Neighbors),
    best_neighbors(Neighbors, Best), % Get the best neighbor based on heuristic
    best_first_search_helper([Best | [Current | Rest]], Goal, Path).

% Find the best neighbor based on the heuristic value
best_neighbors(Neighbors, Best) :-
    findall(Heuristic-Node, (member(Node, Neighbors), heuristic(Node, Heuristic)), HeuristicList),
    sort(HeuristicList, Sorted),  % Sort neighbors based on heuristic value
    Sorted = [_-Best | _],   % Get the best node
    !.  % Once we have the best, stop further processing

% Entry point: Initiating the Best First Search algorithm
:- initialization(main).

main :-
    write('192311264'), nl,
    write('Best First Search Algorithm: Finding the shortest path from a start node to a goal node'), nl,
    best_first_search(a, f, Path),
    write('Path found: '), write(Path), nl.
